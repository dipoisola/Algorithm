PROJECTEULER2: Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

import java.util.Map;
import java.util.TreeMap;
import java.math.BigInteger;

class Main {
    static Map<Integer, BigInteger> memo = new TreeMap<Integer, BigInteger>();
    
    public static void main(String[] args) {
        BigInteger evenSum = BigInteger.ZERO;
        int n = 1;
    
        while (memoizedFibonacci(n).compareTo(BigInteger.valueOf(4000000)) < 0) {
      
            if (memoizedFibonacci(n).mod(BigInteger.valueOf(2)) == BigInteger.valueOf(0))
            evenSum = evenSum.add(memoizedFibonacci(n));
        
            n++;
        }
    
        System.out.println(evenSum);
    }
  
    static BigInteger memoizedFibonacci(int n) {
        if (n <= 2) return BigInteger.valueOf(n);
        
        if (memo.get(n) == null) {
            //If the element is not in the treemap, we then calculate it and add it.
            memo.put(n, memoizedFibonacci(n-1).add(memoizedFibonacci(n-2)));
    }
    
        return memo.get(n); //return the treemap.
    }
}